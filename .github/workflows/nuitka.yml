# 名称
name: Build

# 运行条件
on:
  # 触发条件
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

# 主任务
jobs:
  build:
    if: ${{ github.event_name == 'push' && !startsWith(github.event.ref, 'refs/tags/') && contains(github.event.head_commit.message, '[build skip]') == false }}
    # 全都要！
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on:  ${{ matrix.os }}

    steps:
      # Check-out repository
      - name: Check out
        uses: actions/checkout@v3

      # 获取短 sha
      - name: Get short commit sha (bash)
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        id: get_short_sha_bash
        run: |
          short_sha=$(echo ${GITHUB_SHA} | cut -c1-7)
          echo "short_sha=$short_sha" >> $GITHUB_OUTPUT
      - name: Get short commit sha (powershell)
        if: runner.os == 'Windows'
        id: get_short_sha_powershell
        run: |
          $short_sha=${GITHUB_SHA}.substring(1,7)
          Write-Output "short_sha=$short_sha" >> $GITHUB_OUTPUT


      # 安装 Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'  # 为了支持 win7 我还是得用 3.8
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
          cache-dependency-path: '**/requirement*.txt'

      # 安装依赖
      - name: Install env
        run: |
          pip install -r requirement.txt
          pip install nuitka orderedset


#      # Build python script into a stand-alone exe
#      - name: Build
#        uses: Nuitka/Nuitka-Action@v0.4
#        with:
#          script-name: DR.py
#          standalone: true
#          onefile: false
##          include-package-data: './configs=./configs'
#          assume-yes-for-download: true

      # 还是得我自己写脚本
      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          ./action_build.ps1
#          $arg = "--standalone --assume-yes-for-download "
#          $arg += "--msvc=latest --clang --lto=no --output-dir=build "
#          $arg += "--nofollow-import-to=objprint,numpy,pillow,cffi,PIL,pyglet "
#          $arg += "--include-data-dir=./libs/pyglet=./pyglet "
#          $arg += "--include-data-dir=./libs/fonts=./libs/fonts "
#          $arg += "--include-data-dir=./textures=./textures "
#          $arg += "--include-data-dir=./configs=./configs "
#          python -m nuitka $arg DR.py

      - name: Build on MacOS / Linux
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        shell: bash
        run: |
          arg="--standalone --assume-yes-for-download --output-dir=build "
          arg+="--clang --lto=no "
          arg+="--nofollow-import-to=objprint,numpy,pillow,cffi,PIL,pyglet "
          arg+="--include-data-dir=./libs/pyglet=./pyglet "
          arg+="--include-data-dir=./libs/fonts=./libs/fonts "
          arg+="--include-data-dir=./textures=./textures "
          arg+="--include-data-dir=./configs=./configs"
          python -m nuitka $arg DR.py

      - name: after build
        run: python after_compile.py


      # Uploads artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: |
            build/*.zip